#!/usr/bin/env python
import datetime
import os
import threading
import socket
from glob import glob

if 'NETCONSOLE_LOG_DIR' in os.environ:
    NETCONSOLE_LOG_DIR = os.environ['NETCONSOLE_LOG_DIR']
else:
    NETCONSOLE_LOG_DIR = '.'


if 'NETCONSOLE_PORTS' in os.environ:
    NETCONSOLE_PORTS = os.environ['NETCONSOLE_PORTS']
else:
    NETCONSOLE_PORTS = '6666,unknown'

if 'NETCONSOLE_BIND_IP' in os.environ:
    NETCONSOLE_BIND_IP = os.environ['NETCONSOLE_BIND_IP']
else:
    NETCONSOLE_BIND_IP = '127.0.0.1'

DEBUG = 'NETCONSOLE_DEBUG' in os.environ

def debug_log(*args, **kwargs):
    if DEBUG:
        print(*args, **kwargs)

DAYS_OLD_LOGS = 10

def listener(port_num, name):
    ts = datetime.datetime.now()
    ts_digitsonly = ''.join(list(filter(str.isdigit, ts.isoformat())))
    ts_date = ts.date()
    debug_log(f'This is {name} listener at {ts.isoformat()}')

    # Clean up logs more than X days old
    for log_filepath in glob(f'{NETCONSOLE_LOG_DIR}/{name}_*'):
        _, log_filename = os.path.split(log_filepath)
        ts_str = log_filename.replace(f'{name}_', '')
        yyyy = int(ts_str[:4])
        mm = int(ts_str[4:6])
        dd = int(ts_str[6:8])
        log_date = datetime.date(yyyy, mm, dd)
        delta = ts_date - log_date
        if delta.days > DAYS_OLD_LOGS:
            os.remove(log_filepath)
            debug_log(f'Removed old log: {log_filepath}')


    # Start listening for packets
    sock = socket.socket(socket.AF_INET, # Internet
                         socket.SOCK_DGRAM) # UDP
    sock.bind((NETCONSOLE_BIND_IP, port_num))
    debug_log(f'Bound to {NETCONSOLE_BIND_IP}:{port_num}, accepting connections')
    output_filename = f'{NETCONSOLE_LOG_DIR}/{name}_{ts_digitsonly}'

    debug_log(f'Opening {output_filename} for writing...')
    with open(output_filename, 'w') as log_file:
        while True:
            data, _ = sock.recvfrom(1024) # buffer size is 1024 bytes
            msg_ts = datetime.datetime.now()
            message = data.decode('utf8')
            log_file.write(f'{msg_ts.isoformat()} {message}')
            log_file.flush()
            if message[-1] == '\n':
                message = message[:-1]
            debug_log(f'{name} {msg_ts.isoformat()} {message}')



def main():
    os.makedirs(NETCONSOLE_LOG_DIR, exist_ok=True)
    threads = []
    
    for part in NETCONSOLE_PORTS.split(':'):
        port_str, name = part.split(',')
        port = int(port_str)
        debug_log(f'Starting thread for {name} listening on {port}')
        t = threading.Thread(
            target=listener,
            name=f'netconsole_logger-{port_str},{name}',
            args=(port, name)
        )
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

if __name__ == "__main__":
    main()
