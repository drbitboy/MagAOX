#!/bin/bash
function log_error() {
    echo -e "$(tput setaf 1 2>/dev/null)$1$(tput sgr0 2>/dev/null)"
}
function log_success() {
    echo -e "$(tput setaf 2 2>/dev/null)$1$(tput sgr0 2>/dev/null)"
}
function log_warn() {
    echo -e "$(tput setaf 3 2>/dev/null)$1$(tput sgr0 2>/dev/null)"
}
function log_info() {
    echo -e "$(tput setaf 4 2>/dev/null)$1$(tput sgr0 2>/dev/null)"
}
if [[ -z $1 ]]; then
    log_info "Usage:"
    log_info "    magaox status [PROCNAME] - show status and last few log lines for each process (or just PROCNAME)"
    log_info "    magaox inspect PROCNAME - connect to the tmux session for PROCNAME"
    log_info "    magaox startup [PROCNAME] - start all processes in /opt/MagAOX/config/proclist_${MAGAOX_ROLE}.txt (or just PROCNAME)"
    log_info "    magaox shutdown [PROCNAME] - show status and last few log lines for each process (or just PROCNAME)"
    log_info "    magaox restart [PROCNAME] - shutdown then startup each process (or just PROCNAME)"
    exit 1
else
    case $1 in
        status|startup|shutdown|restart|inspect)
            action=$1
            if [[ ! -z $2 ]]; then
                procname_of_interest=$2
                procname_provided=1
            else
                procname_of_interest=
                procname_provided=0
            fi
            ;;
        *)
            echo "Argument must be status, inspect, startup, shutdown, or restart."
            exit 1
    esac
fi
if [[ -z $MAGAOX_ROLE ]]; then
    log_error "Couldn't find \$MAGAOX_ROLE in environment"
    exit 1
fi

set -euo pipefail

# CentOS + devtoolset-7 aliases sudo, but breaks command line arguments for it,
# so if we need those, we must use $_REAL_SUDO.
if [[ -e /usr/bin/sudo ]]; then
  _REAL_SUDO=/usr/bin/sudo
elif [[ -e /bin/sudo ]]; then
  _REAL_SUDO=/bin/sudo
else
  if [[ -z $(command -v sudo) ]]; then
    echo "Can't find sudo!"
    exit 1
  else
    _REAL_SUDO=$(which sudo)
  fi
fi

function as_xsup() {
    if [ "$(whoami)" != xsup ]; then
        $_REAL_SUDO -u xsup -s -- "$@"
    else
        "$@"
    fi
}

function session_exists() {
    procname=$1
    as_xsup tmux ls -F "#{session_name}" 2>/dev/null | grep "^$procname$" > /dev/null
    return $?
}

function show_brief_status() {
    procname=$1
    if [[ ! -e /opt/MagAOX/sys/$procname/pid ]]; then
        log_error "$procname: not started"
    else
        pid=$(cat /opt/MagAOX/sys/$procname/pid)
        if ps -p $pid > /dev/null; then
            log_success "$procname: running (pid: $pid)"
        else
            log_error "$procname: dead (stale pid: $pid)"
        fi
    fi
}

function status() {
    procname=$1
    show_brief_status $procname
    logdump -n 1 $procname 2>&1 | tail -n 5
    log_info "End recent $procname logs"
    echo
}

function startup() {
    procname=$1
    appname=$2
    #1) check if session exists
    if session_exists $procname; then
        log_info "Session $procname exists.  Doing nothing."
        show_brief_status $procname
        return 0
    fi

    #2) Start new session and execute command
    log_info "Session $procname does not exist"

    execpath="/opt/MagAOX/bin/$appname"
    if [[ ! -x $execpath ]]; then
        log_error "No executable $execpath found"
        return 1
    fi
    command="$execpath -n $1"

    as_xsup tmux new -s $procname -d
    log_info "Created tmux session '$procname'"
    as_xsup tmux send-keys -t $procname "$command" Enter
    log_success "Executed in $procname session: $command"
    if [[ $appname == xindiserver ]]; then
        # Why? Working theory: xindiserver has to set up and/or drain all
        # FIFOs before the xapps start. Otherwise, (some) drivers fail to start (sometimes)
        # and (sometimes) xindiserver dies without explanation.
        log_info "Waiting 5 seconds for xindiserver..."
        sleep 5
    fi
}

function shutdown() {
    procname=$1
    appname=$2
    wait=0
    if session_exists $procname; then
        while session_exists $procname; do
            as_xsup tmux send-keys -t $procname C-c
            as_xsup tmux send-keys -t $procname "exit" Enter
            log_info "waiting for tmux session $procname to exit..."
            sleep 1
            wait=$((wait + 1))
            if (( wait > 5 )); then
                as_xsup tmux kill-session -t $procname
                log_warn "Killed tmux session for $procname"
            fi
        done
        log_success "Ended tmux session for $procname"
    else
        log_info "No running tmux session for $procname"
    fi
}

function inspect_one_process() {
    procname=$1
    if session_exists $procname; then
        as_xsup tmux attach-session -t $procname
    else
        log_error "No running session for $procname"
    fi
}

case $action in
    status|startup|shutdown)
        proclist=/opt/MagAOX/config/proclist_${MAGAOX_ROLE}.txt
        if [[ ! -e $proclist ]]; then
            log_error "No process list at $proclist"
            exit 1
        fi
        grep -v '^#' < $proclist | while read -r procname appname; do
            if [[ -z $procname || -z $appname ]]; then
                continue
            fi
            if [[ $procname_provided == 0 || ( $procname_provided == 1 && $procname == $procname_of_interest ) ]]; then
                $action $procname $appname
            fi
        done
        ;;
    restart)
        bash $0 shutdown $procname_of_interest
        bash $0 startup $procname_of_interest
        ;;
    inspect)
        if [[ $procname_provided == 1 ]]; then
            inspect_one_process $procname_of_interest
        else
            log_error "Must provide procname as second argument"
        fi
        ;;
    *)
        echo "Should never match! See validation above."
        exit 1
esac

